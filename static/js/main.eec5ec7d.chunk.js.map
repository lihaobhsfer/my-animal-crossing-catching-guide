{"version":3,"sources":["data/data.csv","components/CustomCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CustomCard","url","Name","Price","Location","Size","Time","MonthsInWord","goneNextMonth","newThisMonth","availableNow","style","background","margin","borderRadius","display","src","alt","className","span","AlertTwoTone","twoToneColor","EnvironmentTwoTone","CalendarTwoTone","ClockCircleTwoTone","DollarCircleTwoTone","SlidersTwoTone","WarningTwoTone","App","state","hemisphere","columns","type","data","dataAggregated","viewMode","sortByPrice","filterGoneNextMonth","filterNewThisMonth","showThisMonth","showAll","filterData","df","filter","i","month","Date","getMonth","indexOf","names","filteredData","map","push","console","log","length","setState","sortData","sort","a","b","parseInt","replace","localeCompare","onSortButtonClicked","sortType","onMonthChange","e","target","value","onHemisphereChange","onTypeChange","onFilterGoneNextMonthButtonClicked","filterStuff","onFilterGNewThisMonthButtonClicked","onShowThisMonthClicked","d3","fishData","newArr","split","nextMonth","prevMonth","arr","res","tmpArr","last","pop","unshift","reverse","ret","months","translateMonth","timeInWords","currentHour","getHours","match","numbers","j","checkAvailableNow","then","row","Object","entries","key","title","dataIndex","render","maxWidth","Group","defaultValue","onChange","this","Button","dataSource","width","alignItems","sm","md","lg","onClick","ArrowUpOutlined","ArrowDownOutlined","itemProps","xs","xl","React","Component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eec5ec7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.a1a5625f.csv\";","// TODO: Icon for \"Available Now\", and display near the pic\n\nimport React from \"react\";\nimport { Card, Row, Col } from \"antd\";\nimport {\n  ClockCircleTwoTone,\n  CalendarTwoTone,\n  EnvironmentTwoTone,\n  DollarCircleTwoTone,\n  SlidersTwoTone,\n  AlertTwoTone,\n  WarningTwoTone,\n} from \"@ant-design/icons\";\n\nconst CustomCard = ({\n  url,\n  Name,\n  Price,\n  Location,\n  Size,\n  Time,\n  MonthsInWord,\n  goneNextMonth,\n  newThisMonth,\n  availableNow,\n}) => (\n  <Card\n    style={{\n      background: \"#fefae3\",\n      margin: \"5px\",\n      borderRadius: \"10px\",\n    }}\n  >\n    <img style={{ display: \"block\", margin: \"0 auto\" }} src={url} alt={Name} />\n    <div className=\"title\">\n      <h3>{Name}</h3>\n    </div>\n    <div className=\"card-desc\">\n      {availableNow && (\n        <Row>\n          <Col span={4}>\n            <AlertTwoTone twoToneColor=\"#71997f\" />\n          </Col>\n          <Col span={20}>\n            <p className=\"desc-text\">Available Now</p>\n          </Col>\n        </Row>\n      )}\n      <Row>\n        <Col span={4}>\n          <EnvironmentTwoTone twoToneColor=\"rgb(223, 180, 129)\" />\n        </Col>\n        <Col span={20}>\n          <p className=\"desc-text\">{Location}</p>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={4}>\n          <CalendarTwoTone twoToneColor=\"rgb(223, 180, 129)\" />\n        </Col>\n        <Col span={20}>\n          <p className=\"desc-text\">{MonthsInWord}</p>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={4}>\n          <ClockCircleTwoTone twoToneColor=\"rgb(223, 180, 129)\" />\n        </Col>\n        <Col span={20}>\n          <p className=\"desc-text\">{Time}</p>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={4}>\n          <DollarCircleTwoTone twoToneColor=\"rgb(223, 180, 129)\" />\n        </Col>\n        <Col span={20}>\n          <p className=\"desc-text\">{Price}</p>\n        </Col>\n      </Row>\n      {Size && (\n        <Row>\n          <Col span={4}>\n            <SlidersTwoTone twoToneColor=\"rgb(223, 180, 129)\" />\n          </Col>\n          <Col span={20}>\n            <p className=\"desc-text\">{Size}</p>\n          </Col>\n        </Row>\n      )}\n      {goneNextMonth && (\n        <Row>\n          <Col span={4}>\n            <WarningTwoTone twoToneColor=\"#c09279\" />\n          </Col>\n          <Col span={20}>\n            <p className=\"desc-text\">Gone Next Month</p>\n          </Col>\n        </Row>\n      )}\n      {newThisMonth && (\n        <Row>\n          <Col span={4}>\n            <AlertTwoTone twoToneColor=\"#71997f\" />\n          </Col>\n          <Col span={20}>\n            <p className=\"desc-text\">New This Month</p>\n          </Col>\n        </Row>\n      )}\n    </div>\n  </Card>\n);\n\nexport default CustomCard;\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport fishData from \"./data/data.csv\";\nimport { Table, Radio, Row, Col, Button } from \"antd\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\nimport { ArrowDownOutlined, ArrowUpOutlined } from \"@ant-design/icons\";\nimport \"./App.css\";\nimport CustomCard from \"./components/CustomCard\";\nclass App extends React.Component {\n  state = {\n    hemisphere: \"Northern Hemisphere\",\n    columns: [],\n    type: \"Fish\",\n    data: [],\n    dataAggregated: [], // stores aggregated month data\n    viewMode: \"CARD\",\n    sortByPrice: \"DESC\",\n    filterGoneNextMonth: true,\n    filterNewThisMonth: false,\n    showThisMonth: true,\n    showAll: true\n  };\n\n  componentDidMount() {\n    let df = [];\n    let columns = [];\n\n    // d3.dsv(\"|\", \"https://lihaobhsfer.cn/data.csv\",function (data) {\n    d3.dsv(\"|\", fishData, function (data) {\n      let arr = data[\"Months\"].replace(\"[\", \"\").replace(\"]\", \"\").split(\",\");\n      let newArr = arr.map((i) => {\n        return parseInt(i, 10);\n      });\n\n      data[\"goneNextMonth\"] = false;\n      data[\"newThisMonth\"] = false;\n      let date = new Date();\n      let month = date.getMonth() + 1;\n      let nextMonth = (month % 12) + 1;\n      let prevMonth = month - 1;\n      if (prevMonth === 0) prevMonth = 12;\n\n      if (newArr.indexOf(month) !== -1 && newArr.indexOf(nextMonth) === -1) data[\"goneNextMonth\"] = true;\n      if (newArr.indexOf(prevMonth) === -1 && newArr.indexOf(month) !== -1) data[\"newThisMonth\"] = true;\n\n      data[\"Months\"] = newArr;\n      data[\"MonthsInWord\"] = translateMonth(newArr);\n      data[\"availableNow\"] = checkAvailableNow(data[\"Time\"])\n      df.push(data);\n\n      function checkAvailableNow (timeInWords) {\n        let date = new Date()\n        let currentHour = date.getHours()\n        console.log(\"current hour is\", currentHour)\n        console.log(timeInWords)\n        if (timeInWords === \"All day\"){\n          console.log(\"all day\")\n          return true\n        }\n        let ret = []\n        if(timeInWords.match(/[0-9]+pm - [0-9]+am/)){\n          let numbers = timeInWords.match(/[0-9]+/g).map(i => parseInt(i))\n          console.log(numbers)\n          for(let j = 0; j<=numbers[1]; j++) ret.push(j)\n          for(let j = numbers[0] + 12; j <= 23; j++) ret.push(j)\n        } else if(timeInWords.match(/[0-9]+am - [0-9]+pm/)){\n          let numbers = timeInWords.match(/[0-9]+/g).map(i => parseInt(i))\n          console.log(numbers)\n          for(let i = numbers[0]; i<=numbers[1]+12; i++) ret.push(i)\n        }else if(timeInWords.match(/[0-9]+am - [0-9]+am & [0-9]+pm - [0-9]+pm/)){\n          let numbers = timeInWords.match(/[0-9]+/g).map(i => parseInt(i))\n          console.log(numbers)\n          for(let i = numbers[0]; i<=numbers[1]; i++) ret.push(i)\n          for(let i = numbers[2]; i<=numbers[3]; i++) ret.push(i+12)\n        }\n        console.log(ret)\n        return ret.indexOf(currentHour) !== -1\n      }\n\n      function translateMonth(arr) {\n        if (arr.length === 12) return \"All Year\";\n        else {\n          let res = [];\n          let tmpArr = [];\n          tmpArr.push(arr[0]);\n\n          for (let i = 1; i < arr.length; i++) {\n            if (arr[i] - arr[i - 1] === 1) tmpArr.push(arr[i]);\n            else {\n              res.push(tmpArr);\n              tmpArr = [];\n              tmpArr.push(arr[i]);\n            }\n          }\n          res.push(tmpArr);\n          if (arr.indexOf(1) !== -1 && arr.indexOf(12) !== -1) {\n            let last = res.pop();\n            res[0].unshift(...last.reverse());\n          }\n\n          let ret = \"\";\n          let months = [\n            \"Jan.\",\n            \"Feb.\",\n            \"Mar.\",\n            \"Apr.\",\n            \"May\",\n            \"Jun.\",\n            \"Jul.\",\n            \"Aug.\",\n            \"Sep.\",\n            \"Oct.\",\n            \"Nov.\",\n            \"Dec.\",\n          ];\n          for (let i = 0; i < res.length; i++) {\n            let a = res[i];\n            let length = a.length;\n            if (length === 1) ret = ret + months[a[0] - 1];\n            else ret = ret + months[a[0] - 1] + \"-\" + months[a[length - 1] - 1];\n            if (i !== res.length - 1) ret += \", \";\n          }\n          return ret;\n        }\n      }\n    }).then(() => {\n      let row = df[0];\n      for (const [key] of Object.entries(row)) {\n        if (key === \"Month\" || key.match(\"Hemisphere\")) {\n        } else if (key === \"url\") {\n          columns.push({\n            title: \"Image\",\n            key: \"url\",\n            dataIndex: \"url\",\n            render: (url) => {\n              return <img src={url} alt=\"img\" />;\n            },\n          });\n        } else {\n          columns.push({\n            title: key,\n            dataIndex: key,\n            key: key,\n          });\n        }\n      }\n\n      // filter for hemisphere\n\n      this.setState(\n        {\n          data: df,\n          columns: columns,\n        },\n        () => {\n          this.sortData();\n        }\n      );\n    });\n  }\n\n  filterData = () => {\n    let df = this.state.data;\n    df = df.filter(\n      (i) =>\n        i[\"Hemisphere\"] === this.state.hemisphere &&\n        i[\"Type\"] === this.state.type\n    );\n\n    if (this.state.filterGoneNextMonth)\n      df = df.filter((i) => i[\"goneNextMonth\"] === true);\n    if (this.state.filterNewThisMonth)\n      df = df.filter(i => i[\"newThisMonth\"] === true)\n     \n    let date = new Date();\n    let month = date.getMonth() + 1\n    if(this.state.showThisMonth)\n      df = df.filter(i => i[\"Months\"].indexOf(month) !== -1)\n    // Prepare data for this month\n    let names = {};\n    let filteredData = [];\n    // eslint-disable-next-line\n    df.map((i) => {\n      if (!names[i[\"Name\"]]) {\n        names[i[\"Name\"]] = 1;\n        filteredData.push(i);\n      }\n    });\n    console.log(filteredData.length);\n    this.setState({\n      filteredData: filteredData,\n    });\n  };\n\n  sortData = () => {\n    let type = this.state.sortByPrice;\n\n    let df = this.state.data;\n    if (type === \"ASC\")\n      df.sort(\n        (a, b) =>\n          parseInt(a.Price.replace(\",\", \"\"), 10) -\n            parseInt(b.Price.replace(\",\", \"\"), 10) ||\n          a.Name.localeCompare(b.Name)\n      );\n    if (type === \"DESC\")\n      df.sort(\n        (a, b) =>\n          parseInt(b.Price.replace(\",\", \"\"), 10) -\n            parseInt(a.Price.replace(\",\", \"\"), 10) ||\n          a.Name.localeCompare(b.Name)\n      );\n    if (type === \"NONE\") df.sort((a, b) => a.Name.localeCompare(b.Name));\n    this.setState(\n      {\n        data: df,\n      },\n      () => {\n        this.filterData();\n      }\n    );\n  };\n\n  onSortButtonClicked = () => {\n    let sortType = this.state.sortByPrice;\n    if (sortType === \"NONE\") sortType = \"ASC\";\n    else if (sortType === \"ASC\") sortType = \"DESC\";\n    else sortType = \"NONE\";\n\n    this.setState(\n      {\n        sortByPrice: sortType,\n      },\n      () => {\n        this.sortData();\n      }\n    );\n  };\n\n  onMonthChange = (e) => {\n    console.log(e.target.value);\n    this.setState(\n      {\n        month: e.target.value,\n      },\n      () => {\n        this.filterData();\n      }\n    );\n  };\n\n  onHemisphereChange = (e) => {\n    console.log(e.target.value);\n    this.setState(\n      {\n        hemisphere: e.target.value,\n      },\n      () => {\n        this.filterData();\n      }\n    );\n  };\n\n  onTypeChange = (e) => {\n    console.log(e.target.value);\n    this.setState(\n      {\n        type: e.target.value,\n      },\n      () => {\n        this.filterData();\n      }\n    );\n  };\n  onFilterGoneNextMonthButtonClicked = () => {\n    let filterStuff = this.state.filterGoneNextMonth;\n    this.setState(\n      {\n        filterGoneNextMonth: !filterStuff,\n      },\n      () => {\n        this.sortData();\n      }\n    );\n  };\n\n  onFilterGNewThisMonthButtonClicked = () => {\n    let filterStuff = this.state.filterNewThisMonth;\n    this.setState(\n      {\n        filterNewThisMonth: !filterStuff,\n      },\n      () => {\n        this.sortData();\n      }\n    );\n  };\n\n  onShowThisMonthClicked = () => {\n    let filterStuff = this.state.showThisMonth;\n    this.setState({\n      showThisMonth: !filterStuff\n    },() => {\n      this.sortData()\n    })\n  }\n  render() {\n    return (\n      <div className=\"container\">\n          <div style={{ maxWidth: \"1200px\", margin: \"0 auto\" }}>\n            <h1 className=\"page-title\">Animal Crossing Catch Guide</h1>\n            <Row>\n              <Radio.Group\n                className=\"radio-select\"\n                defaultValue=\"Northern Hemisphere\"\n                onChange={this.onHemisphereChange}\n              >\n                <Radio.Button value=\"Northern Hemisphere\">\n                  Northern Hemisphere\n                </Radio.Button>\n                <Radio.Button value=\"Southern Hemisphere\">\n                  Southern Hemisphere\n                </Radio.Button>\n              </Radio.Group>\n            </Row>\n            <Row>\n              <Radio.Group\n                className=\"radio-select\"\n                defaultValue=\"Fish\"\n                onChange={this.onTypeChange}\n              >\n                <Radio.Button value=\"Fish\">Fish</Radio.Button>\n                <Radio.Button value=\"Bug\">Bugs</Radio.Button>\n              </Radio.Group>\n            </Row>\n\n            {/* Table, view mode is \"LIST\" */}\n            {this.state.viewMode === \"LIST\" &&\n              this.state.data &&\n              this.state.data.length > 0 && (\n                <Table\n                  columns={this.state.columns}\n                  dataSource={this.state.filteredData}\n                />\n              )}\n            {this.state.viewMode === \"CARD\" &&\n              this.state.data &&\n              this.state.data.length > 0 && (\n                <div style={{width: \"100%\"}}>\n                  <Row style={{display:\"flex\", alignItems:\"center\"}}>\n                    <Col sm={12} md={6} lg={4}>\n                      <Button className={\n                        this.state.showThisMonth\n                        ? \"button-filter-checked\"\n                        : \"button-filter\"\n                      } onClick={this.onShowThisMonthClicked}>Available This Month</Button>\n                    </Col>\n                    <Col>\n                      <Button\n                        className=\"button-select\"\n                        onClick={this.onSortButtonClicked}\n                      >\n                        Price{\" \"}\n                        {this.state.sortByPrice === \"NONE\" ? (\n                          \"\"\n                        ) : this.state.sortByPrice === \"ASC\" ? (\n                          <ArrowUpOutlined />\n                        ) : (\n                          <ArrowDownOutlined />\n                        )}\n                      </Button>\n                    </Col>\n                    <Col>\n                      <Button\n                        className={\n                          this.state.filterGoneNextMonth\n                            ? \"button-filter-checked\"\n                            : \"button-filter\"\n                        }\n                        onClick={this.onFilterGoneNextMonthButtonClicked}\n                      >\n                        Gone Next Month\n                      </Button>\n                    </Col>\n                    <Col>\n                      <Button\n                        className={\n                          this.state.filterNewThisMonth\n                            ? \"button-filter-checked\"\n                            : \"button-filter\"\n                        }\n                        onClick={this.onFilterGNewThisMonthButtonClicked}\n                      >\n                        New This Month\n                      </Button>\n                    </Col>\n                  </Row>\n\n                  <Row style={{ margin: \"5px\" }}>\n                    {this.state.filteredData &&\n                      this.state.filteredData.map(\n                        ({ ...itemProps }) => (\n                          <Col xs={12} sm={8} md={6} lg={4} xl={4}>\n                            <CustomCard {...itemProps} />\n                          </Col>\n                        )\n                      )}\n                  </Row>\n                </div>\n              )}\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}