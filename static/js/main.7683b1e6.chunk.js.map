{"version":3,"sources":["components/CustomCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CustomCard","url","Name","Price","Location","Size","Time","MonthsInWord","goneNextMonth","newThisMonth","availableNow","ShadowSize","SwimmingPattern","style","background","margin","borderRadius","display","src","alt","className","span","AlertTwoTone","twoToneColor","EnvironmentTwoTone","CalendarTwoTone","ClockCircleTwoTone","DollarCircleTwoTone","SlidersTwoTone","PlayCircleTwoTone","WarningTwoTone","App","state","hemisphere","columns","type","data","dataAggregated","viewMode","sortByPrice","filterGoneNextMonth","filterNewThisMonth","showThisMonth","showAll","filteredData","sortedData","filterData","df","filter","i","month","Date","getMonth","indexOf","names","Map","map","get","set","push","console","log","length","setState","sortData","sort","a","b","parseInt","replace","localeCompare","dfAvailable","dfNotAvailable","dfMap","dfWithLocation","key","val","onSortButtonClicked","sortType","onMonthChange","e","currentTarget","value","onHemisphereChange","target","onTypeChange","onFilterGoneNextMonthButtonClicked","filterStuff","onFilterGNewThisMonthButtonClicked","onShowThisMonthClicked","d3","newArr","split","nextMonth","prevMonth","arr","res","tmpArr","last","pop","unshift","reverse","ret","months","translateMonth","timeInWords","currentHour","getHours","toLowerCase","match","numbers","j","checkAvailableNow","then","row","Object","entries","title","dataIndex","render","maxWidth","Group","defaultValue","onChange","this","Button","dataSource","width","alignItems","sm","md","lg","onClick","ArrowUpOutlined","ArrowDownOutlined","itemProps","xs","xl","React","Component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7683b1e6.chunk.js","sourcesContent":["// TODO: Icon for \"Available Now\", and display near the pic\n\nimport React from \"react\";\nimport { Card, Row, Col } from \"antd\";\nimport {\n  ClockCircleTwoTone,\n  CalendarTwoTone,\n  EnvironmentTwoTone,\n  DollarCircleTwoTone,\n  SlidersTwoTone,\n  AlertTwoTone,\n  WarningTwoTone,\n  PlayCircleTwoTone,\n} from \"@ant-design/icons\";\n\ninterface cardStatelessProps {\n  url: string;\n  Name: string;\n  Price: number;\n  Location: string;\n  Size: string;\n  Time: string;\n  MonthsInWord: string;\n  goneNextMonth: boolean;\n  newThisMonth: boolean;\n  availableNow: boolean;\n  ShadowSize: string;\n  SwimmingPattern: string;\n}\n\nconst CustomCard: React.SFC<cardStatelessProps> = ({\n  url,\n  Name,\n  Price,\n  Location,\n  Size,\n  Time,\n  MonthsInWord,\n  goneNextMonth,\n  newThisMonth,\n  availableNow,\n  ShadowSize,\n  SwimmingPattern,\n}) => (\n  <Card\n    style={{\n      background: \"#fefae3\",\n      margin: \"5px\",\n      borderRadius: \"10px\",\n    }}\n  >\n    <img style={{ display: \"block\", margin: \"0 auto\" }} src={url} alt={Name} />\n    <div className=\"title\">\n      <h3>{Name}</h3>\n    </div>\n    <div className=\"card-desc\">\n      {availableNow && (\n        <Row>\n          <Col span={4}>\n            <AlertTwoTone twoToneColor=\"#71997f\" />\n          </Col>\n          <Col span={20}>\n            <p className=\"desc-text\">Available Now</p>\n          </Col>\n        </Row>\n      )}\n      {Location && (\n        <Row>\n          <Col span={4}>\n            <EnvironmentTwoTone twoToneColor=\"rgb(223, 180, 129)\" />\n          </Col>\n          <Col span={20}>\n            <p className=\"desc-text\">{Location}</p>\n          </Col>\n        </Row>\n      )}\n      <Row>\n        <Col span={4}>\n          <CalendarTwoTone twoToneColor=\"rgb(223, 180, 129)\" />\n        </Col>\n        <Col span={20}>\n          <p className=\"desc-text\">{MonthsInWord}</p>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={4}>\n          <ClockCircleTwoTone twoToneColor=\"rgb(223, 180, 129)\" />\n        </Col>\n        <Col span={20}>\n          <p className=\"desc-text\">{Time}</p>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={4}>\n          <DollarCircleTwoTone twoToneColor=\"rgb(223, 180, 129)\" />\n        </Col>\n        <Col span={20}>\n          <p className=\"desc-text\">{Price}</p>\n        </Col>\n      </Row>\n      {Size && (\n        <Row>\n          <Col span={4}>\n            <SlidersTwoTone twoToneColor=\"rgb(223, 180, 129)\" />\n          </Col>\n          <Col span={20}>\n            <p className=\"desc-text\">{Size}</p>\n          </Col>\n        </Row>\n      )}\n      {ShadowSize && (\n        <Row>\n          <Col span={4}>\n            <SlidersTwoTone twoToneColor=\"rgb(223, 180, 129)\" />\n          </Col>\n          <Col span={20}>\n            <p className=\"desc-text\">{ShadowSize}</p>\n          </Col>\n        </Row>\n      )}\n      {SwimmingPattern && (\n        <Row>\n          <Col span={4}>\n            <PlayCircleTwoTone twoToneColor=\"rgb(223, 180, 129)\" />\n          </Col>\n          <Col span={20}>\n            <p className=\"desc-text\">{SwimmingPattern}</p>\n          </Col>\n        </Row>\n      )}\n      {goneNextMonth && (\n        <Row>\n          <Col span={4}>\n            <WarningTwoTone twoToneColor=\"#c09279\" />\n          </Col>\n          <Col span={20}>\n            <p className=\"desc-text\">Gone Next Month</p>\n          </Col>\n        </Row>\n      )}\n      {newThisMonth && (\n        <Row>\n          <Col span={4}>\n            <AlertTwoTone twoToneColor=\"#71997f\" />\n          </Col>\n          <Col span={20}>\n            <p className=\"desc-text\">New This Month</p>\n          </Col>\n        </Row>\n      )}\n    </div>\n  </Card>\n);\n\nexport default CustomCard;\n","import React, { MouseEvent } from \"react\";\nimport * as d3 from \"d3\";\nimport { Table, Radio, Row, Col, Button } from \"antd\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\nimport { ArrowDownOutlined, ArrowUpOutlined } from \"@ant-design/icons\";\nimport \"./App.css\";\nimport CustomCard from \"./components/CustomCard\";\nimport { DSVRowAny } from \"d3\";\nimport { RadioChangeEvent } from \"antd/lib/radio\";\n\nclass App extends React.Component {\n  state = {\n    hemisphere: \"Northern Hemisphere\",\n    columns: [],\n    type: \"Fish\",\n    data: [],\n    dataAggregated: [], // stores aggregated month data\n    viewMode: \"CARD\",\n    sortByPrice: \"DESC\",\n    filterGoneNextMonth: false,\n    filterNewThisMonth: true,\n    showThisMonth: true,\n    showAll: true,\n    filteredData: [],\n    sortedData: [],\n  };\n\n  componentDidMount() {\n    let df: Array<DSVRowAny> = [];\n    let columns: Array<object> = [];\n\n    // d3.dsv(\"|\", \"https://lihaobhsfer.cn/data.csv\",function (data) {\n    d3.dsv(\"|\", `./data/data.csv`, (data: DSVRowAny): any => {\n      let arr = data[\"Months\"].replace(\"[\", \"\").replace(\"]\", \"\").split(\",\");\n      let newArr = arr.map((i: string) => {\n        return parseInt(i, 10);\n      });\n\n      data[\"goneNextMonth\"] = false;\n      data[\"newThisMonth\"] = false;\n      let date = new Date();\n      let month = date.getMonth() + 1;\n      let nextMonth = (month % 12) + 1;\n      let prevMonth = month - 1;\n      if (prevMonth === 0) prevMonth = 12;\n\n      if (newArr.indexOf(month) !== -1 && newArr.indexOf(nextMonth) === -1)\n        data[\"goneNextMonth\"] = true;\n      if (newArr.indexOf(prevMonth) === -1 && newArr.indexOf(month) !== -1)\n        data[\"newThisMonth\"] = true;\n\n      data[\"Months\"] = newArr;\n      data[\"MonthsInWord\"] = translateMonth(newArr);\n      data[\"availableNow\"] =\n        checkAvailableNow(data[\"Time\"]) && newArr.indexOf(month) !== -1;\n      data[\"ShadowSize\"] = data[\"Shadow Size\"];\n      data[\"SwimmingPattern\"] = data[\"Swimming Pattern\"];\n\n      df.push(data);\n\n      function checkAvailableNow(timeInWords: string): boolean {\n        let date: Date = new Date();\n        let currentHour = date.getHours();\n        // console.log(\"current hour is\", currentHour)\n        // console.log(timeInWords)\n        if (timeInWords.toLowerCase() === \"all day\") {\n          // console.log(\"all day\")\n          return true;\n        }\n        let ret = [];\n        if (timeInWords.match(/[0-9]+pm - [0-9]+am/)) {\n          let numbers: Array<number> = timeInWords\n            .match(/[0-9]+/g)!\n            .map((i) => parseInt(i));\n          // console.log(numbers)\n          for (let j = 0; j < numbers[1]; j++) ret.push(j);\n          for (let j = numbers[0] + 12; j < 24; j++) ret.push(j);\n        } else if (timeInWords.match(/[0-9]+am - [0-9]+pm/)) {\n          let numbers: Array<number> = timeInWords\n            .match(/[0-9]+/g)!\n            .map((i) => parseInt(i));\n          // console.log(numbers)\n          for (let i = numbers[0]; i < numbers[1] + 12; i++) ret.push(i);\n        } else if (\n          timeInWords.match(/[0-9]+am - [0-9]+am & [0-9]+pm - [0-9]+pm/)\n        ) {\n          let numbers: Array<number> = timeInWords\n            .match(/[0-9]+/g)!\n            .map((i) => parseInt(i));\n          // console.log(numbers)\n          for (let i = numbers[0]; i < numbers[1]; i++) ret.push(i);\n          for (let i = numbers[2]; i < numbers[3]; i++) ret.push(i + 12);\n        }\n        // console.log(ret)\n        return ret.indexOf(currentHour) !== -1;\n      }\n\n      function translateMonth(arr: Array<number>): string {\n        if (arr.length === 12) return \"All Year\";\n        else {\n          let res = [];\n          let tmpArr = [];\n          tmpArr.push(arr[0]);\n\n          for (let i = 1; i < arr.length; i++) {\n            if (arr[i] - arr[i - 1] === 1) tmpArr.push(arr[i]);\n            else {\n              res.push(tmpArr);\n              tmpArr = [];\n              tmpArr.push(arr[i]);\n            }\n          }\n          res.push(tmpArr);\n          if (arr.indexOf(1) !== -1 && arr.indexOf(12) !== -1) {\n            let last = res.pop();\n            res[0].unshift(...last!.reverse());\n          }\n\n          let ret: string = \"\";\n          let months: Array<string> = [\n            \"Jan.\",\n            \"Feb.\",\n            \"Mar.\",\n            \"Apr.\",\n            \"May\",\n            \"Jun.\",\n            \"Jul.\",\n            \"Aug.\",\n            \"Sep.\",\n            \"Oct.\",\n            \"Nov.\",\n            \"Dec.\",\n          ];\n          for (let i = 0; i < res.length; i++) {\n            let a = res[i];\n            let length = a.length;\n            if (length === 1) ret = ret + months[a[0] - 1];\n            else ret = ret + months[a[0] - 1] + \"-\" + months[a[length - 1] - 1];\n            if (i !== res.length - 1) ret += \", \";\n          }\n          return ret;\n        }\n      }\n    }).then(() => {\n      let row = df[0];\n      for (const [key] of Object.entries(row)) {\n        if (key === \"Month\" || key.match(\"Hemisphere\")) {\n        } else if (key === \"url\") {\n          columns.push({\n            title: \"Image\",\n            key: \"url\",\n            dataIndex: \"url\",\n            render: (url: string) => {\n              return <img src={url} alt=\"img\" />;\n            },\n          });\n        } else {\n          columns.push({\n            title: key,\n            dataIndex: key,\n            key: key,\n          });\n        }\n      }\n\n      // filter for hemisphere\n\n      this.setState(\n        {\n          data: df,\n          columns: columns,\n        },\n        () => {\n          this.filterData();\n        }\n      );\n    });\n  }\n\n  filterData = () => {\n    let df: Array<DSVRowAny> = this.state.data;\n    df = df.filter(\n      (i) =>\n        i[\"Hemisphere\"] === this.state.hemisphere &&\n        i[\"Type\"] === this.state.type\n    );\n\n    if (this.state.filterGoneNextMonth)\n      df = df.filter((i) => i[\"goneNextMonth\"] === true);\n    if (this.state.filterNewThisMonth)\n      df = df.filter((i) => i[\"newThisMonth\"] === true);\n\n    let date = new Date();\n    let month = date.getMonth() + 1;\n    if (this.state.showThisMonth)\n      df = df.filter((i) => i[\"Months\"].indexOf(month) !== -1);\n    // Prepare data for this month\n    let names = new Map<string, number>();\n    let filteredData: Array<DSVRowAny> = [];\n    // eslint-disable-next-line\n    df.map((i) => {\n      if (!names.get(i[\"Name\"])) {\n        names.set(i[\"Name\"], 1);\n        filteredData.push(i);\n      }\n    });\n    console.log(filteredData.length);\n    this.setState(\n      {\n        filteredData: filteredData,\n      },\n      () => {\n        this.sortData();\n      }\n    );\n  };\n\n  sortData = () => {\n    let type = this.state.sortByPrice;\n\n    let df: Array<DSVRowAny> = this.state.filteredData;\n    if (type === \"ASC\")\n      df.sort(\n        (a: any, b: any) =>\n          parseInt(a.Price.replace(\",\", \"\"), 10) -\n            parseInt(b.Price.replace(\",\", \"\"), 10) ||\n          a.Name.localeCompare(b.Name)\n      );\n    if (type === \"DESC\")\n      df.sort(\n        (a: DSVRowAny, b: DSVRowAny) =>\n          parseInt(b.Price.replace(\",\", \"\"), 10) -\n            parseInt(a.Price.replace(\",\", \"\"), 10) ||\n          a.Name.localeCompare(b.Name)\n      );\n    if (type === \"NONE\") df.sort((a, b) => a.Name.localeCompare(b.Name));\n    let dfAvailable = df.filter((a) => a.availableNow);\n    let dfNotAvailable = df.filter((a) => !a.availableNow);\n    df = [...dfAvailable, ...dfNotAvailable];\n\n    // type Dict = { [key: string]; string };\n    let dfMap = new Map<string, Array<object>>();\n    df.map((i) => {\n      if (!dfMap.get(i[\"Location\"])) {\n        dfMap.set(i[\"Location\"], []);\n      }\n      dfMap.get(i[\"Location\"])!.push(i);\n      return null;\n    });\n    const dfWithLocation = [];\n    if (this.state.type === \"Fish\") {\n      if (dfMap.get(\"Sea\")) dfWithLocation.push(dfMap.get(\"Sea\"));\n      if (dfMap.get(\"Sea (Raining)\"))\n        dfWithLocation.push(dfMap.get(\"Sea (Raining)\"));\n      if (dfMap.get(\"Pier\")) dfWithLocation.push(dfMap.get(\"Pier\"));\n      if (dfMap.get(\"River\")) dfWithLocation.push(dfMap.get(\"River\"));\n      if (dfMap.get(\"River (Clifftop)\"))\n        dfWithLocation.push(dfMap.get(\"River (Clifftop)\"));\n      if (dfMap.get(\"River (Clifftop) Pond\"))\n        dfWithLocation.push(dfMap.get(\"River (Clifftop) Pond\"));\n      if (dfMap.get(\"River (Mouth)\"))\n        dfWithLocation.push(dfMap.get(\"River (Mouth)\"));\n      if (dfMap.get(\"Pond\")) dfWithLocation.push(dfMap.get(\"Pond\"));\n    } else {\n      console.log(dfMap);\n\n      for (const [key, val] of dfMap) {\n        console.log(key, val);\n        console.log(dfMap.get(key));\n\n        dfWithLocation.push(dfMap.get(key));\n      }\n    }\n    // console.log(dfWithLocation);\n    this.setState({\n      sortedData: dfWithLocation,\n    });\n  };\n\n  onSortButtonClicked = () => {\n    let sortType = this.state.sortByPrice;\n    if (sortType === \"NONE\") sortType = \"ASC\";\n    else if (sortType === \"ASC\") sortType = \"DESC\";\n    else sortType = \"NONE\";\n\n    this.setState(\n      {\n        sortByPrice: sortType,\n      },\n      () => {\n        this.sortData();\n      }\n    );\n  };\n\n  onMonthChange = (e: MouseEvent<HTMLButtonElement>) => {\n    // console.log(e.target.value);\n    this.setState(\n      {\n        month: e.currentTarget.value,\n      },\n      () => {\n        this.filterData();\n      }\n    );\n  };\n\n  onHemisphereChange = (e: RadioChangeEvent) => {\n    // console.log(e.target.value);\n    this.setState(\n      {\n        hemisphere: e.target.value,\n      },\n      () => {\n        this.filterData();\n      }\n    );\n  };\n\n  onTypeChange = (e: RadioChangeEvent) => {\n    console.log(e.target.value);\n    this.setState(\n      {\n        type: e.target.value,\n      },\n      () => {\n        this.filterData();\n      }\n    );\n  };\n  onFilterGoneNextMonthButtonClicked = () => {\n    let filterStuff = this.state.filterGoneNextMonth;\n    this.setState(\n      {\n        filterGoneNextMonth: !filterStuff,\n      },\n      () => {\n        this.filterData();\n      }\n    );\n  };\n\n  onFilterGNewThisMonthButtonClicked = () => {\n    let filterStuff = this.state.filterNewThisMonth;\n    this.setState(\n      {\n        filterNewThisMonth: !filterStuff,\n      },\n      () => {\n        this.filterData();\n      }\n    );\n  };\n\n  onShowThisMonthClicked = () => {\n    let filterStuff = this.state.showThisMonth;\n    this.setState(\n      {\n        showThisMonth: !filterStuff,\n      },\n      () => {\n        this.filterData();\n      }\n    );\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <div style={{ maxWidth: \"1200px\", margin: \"0 auto\" }}>\n          <h1 className=\"page-title\">Animal Crossing Catch Guide</h1>\n          <Row>\n            <Radio.Group\n              className=\"radio-select\"\n              defaultValue=\"Northern Hemisphere\"\n              onChange={this.onHemisphereChange}\n            >\n              <Radio.Button value=\"Northern Hemisphere\">\n                Northern Hemisphere\n              </Radio.Button>\n              <Radio.Button value=\"Southern Hemisphere\">\n                Southern Hemisphere\n              </Radio.Button>\n            </Radio.Group>\n          </Row>\n          <Row>\n            <Radio.Group\n              className=\"radio-select\"\n              defaultValue=\"Fish\"\n              onChange={this.onTypeChange}\n            >\n              <Radio.Button value=\"Fish\">Fish</Radio.Button>\n              <Radio.Button value=\"Bug\">Bugs</Radio.Button>\n              <Radio.Button value=\"Deep Sea Creature\">\n                Deep Sea Creatures\n              </Radio.Button>\n            </Radio.Group>\n          </Row>\n\n          {/* Table, view mode is \"LIST\" */}\n          {this.state.viewMode === \"LIST\" &&\n            this.state.data &&\n            this.state.data.length > 0 && (\n              <Table\n                columns={this.state.columns}\n                dataSource={this.state.filteredData}\n              />\n            )}\n          {this.state.viewMode === \"CARD\" &&\n            this.state.data &&\n            this.state.data.length > 0 && (\n              <div style={{ width: \"100%\" }}>\n                <Row style={{ display: \"flex\", alignItems: \"center\" }}>\n                  <Col sm={12} md={6} lg={4}>\n                    <Button\n                      className={\n                        this.state.showThisMonth\n                          ? \"button-filter-checked\"\n                          : \"button-filter\"\n                      }\n                      onClick={this.onShowThisMonthClicked}\n                    >\n                      Available This Month\n                    </Button>\n                  </Col>\n                  <Col>\n                    <Button\n                      className=\"button-select\"\n                      onClick={this.onSortButtonClicked}\n                    >\n                      Price{\" \"}\n                      {this.state.sortByPrice === \"NONE\" ? (\n                        \"\"\n                      ) : this.state.sortByPrice === \"ASC\" ? (\n                        <ArrowUpOutlined />\n                      ) : (\n                        <ArrowDownOutlined />\n                      )}\n                    </Button>\n                  </Col>\n                  <Col>\n                    <Button\n                      className={\n                        this.state.filterGoneNextMonth\n                          ? \"button-filter-checked\"\n                          : \"button-filter\"\n                      }\n                      onClick={this.onFilterGoneNextMonthButtonClicked}\n                    >\n                      Gone Next Month\n                    </Button>\n                  </Col>\n                  <Col>\n                    <Button\n                      className={\n                        this.state.filterNewThisMonth\n                          ? \"button-filter-checked\"\n                          : \"button-filter\"\n                      }\n                      onClick={this.onFilterGNewThisMonthButtonClicked}\n                    >\n                      New This Month\n                    </Button>\n                  </Col>\n                </Row>\n\n                <Row style={{ margin: \"5px\" }}>\n                  {this.state.sortedData &&\n                    this.state.sortedData.map((arr: any) => (\n                      <Row style={{ width: \"100%\" }}>\n                        <Row style={{ width: \"100%\" }}>\n                          <h2>{arr && arr[0] && arr[0].Location}</h2>\n                        </Row>\n                        <Row style={{ width: \"100%\" }}>\n                          {arr.map(({ ...itemProps }: any) => (\n                            <Col xs={12} sm={8} md={6} lg={4} xl={4}>\n                              <CustomCard {...itemProps} />\n                            </Col>\n                          ))}\n                        </Row>\n                      </Row>\n                    ))}\n                </Row>\n              </div>\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}