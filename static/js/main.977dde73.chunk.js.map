{"version":3,"sources":["data/fish.csv","App.js","serviceWorker.js","index.js"],"names":["module","exports","months","Content","Layout","App","state","hemisphere","columns","data","dataAggregated","viewMode","onMonthChange","e","console","log","target","value","filter","i","setState","filteredData","df","d3","fishData","push","then","row","Object","entries","key","match","title","dataIndex","render","url","src","alt","month","Date","getMonth","dataThisMonth","toString","names","filteredDataThisMonth","map","length","className","style","backgroundColor","maxWidth","margin","Group","defaultValue","marginTop","marginLeft","marginRight","onChange","this","index","Button","background","dataSource","Name","Price","Location","Size","Time","xs","sm","md","lg","xl","borderRadius","display","span","EnvironmentFilled","ClockCircleFilled","DollarCircleFilled","SlidersFilled","overflow","React","Component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.977dde73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fish.48393333.csv\";","import React from \"react\";\nimport \"./App.css\";\nimport * as d3 from \"d3\";\nimport fishData from \"./data/fish.csv\";\nimport { Layout, Table, Radio, Card, Row, Col } from \"antd\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\nimport {\n  ClockCircleFilled,\n  EnvironmentFilled,\n  DollarCircleFilled,\n  SlidersFilled,\n} from \"@ant-design/icons\";\n\nconst months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\nconst { Content } = Layout;\nclass App extends React.Component {\n  state = {\n    hemisphere: \"Northern Hemisphere\",\n    columns: [],\n    data: [],\n    dataAggregated: [], // stores aggregated month data\n    viewMode: \"CARD\",\n  };\n  componentWillMount() {\n    let df = [];\n    let columns = [];\n    d3.csv(fishData, function (data) {\n      df.push(data);\n    }).then(() => {\n      let row = df[0];\n      console.log(df);\n      for (const [key] of Object.entries(row)) {\n        console.log(key);\n        if (key === \"Month\" || key.match(\"Hemisphere\")) {\n        } else if (key === \"url\") {\n          columns.push({\n            title: \"Image\",\n            key: \"url\",\n            dataIndex: \"url\",\n            render: (url) => {\n              return <img src={url} alt=\"img\" />;\n            },\n          });\n        } else {\n          columns.push({\n            title: key,\n            dataIndex: key,\n            key: key,\n          });\n        }\n      }\n\n      // filter for hemisphere\n      df = df.filter((i) => i[\"Hemisphere\"] === this.state.hemisphere);\n\n      // Prepare data for this month\n      let date = new Date();\n      let month = date.getMonth() + 1;\n      console.log(month);\n      let dataThisMonth = df.filter((i) => i[\"Month\"] === month.toString());\n      let names = {};\n      let filteredDataThisMonth = [];\n      dataThisMonth.map((i) => {\n        if (!names[i[\"Name\"]]) {\n          names[i[\"Name\"]] = 1;\n          filteredDataThisMonth.push(i);\n        }\n      });\n\n      console.log(filteredDataThisMonth.length);\n      this.setState({\n        data: df,\n        filteredData: df,\n        columns: columns,\n        filteredDataThisMonth: filteredDataThisMonth,\n      });\n    });\n  }\n\n  onMonthChange = (e) => {\n    console.log(e.target.value);\n    let data = this.state.data.filter((i) => i[\"Month\"] === e.target.value);\n    this.setState({\n      filteredData: data,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Layout style={{ backgroundColor: \"#cce2cf\" }}>\n          <Content style={{ maxWidth: \"1200px\", margin: \"0 auto\" }}>\n            <h1>Animal Crossing Catch Guide</h1>\n            {/* Month check box */}\n            <Radio.Group\n              defaultValue=\"1\"\n              style={{ marginTop: 16, marginLeft: 5, marginRight: 5 }}\n              onChange={this.onMonthChange}\n            >\n              {months.map((month, index) => (\n                <Radio.Button\n                  value={index + 1 + \"\"}\n                  style={{ background: \"#fefae3\" }}\n                >\n                  {month}\n                </Radio.Button>\n              ))}\n            </Radio.Group>\n\n            {/* Table, view mode is \"LIST\" */}\n            {this.state.viewMode === \"LIST\" &&\n              this.state.data &&\n              this.state.data.length > 0 && (\n                <Table\n                  columns={this.state.columns}\n                  dataSource={this.state.filteredData}\n                />\n              )}\n            {this.state.viewMode === \"CARD\" &&\n              this.state.data &&\n              this.state.data.length > 0 && (\n                <div>\n                  <h2>Available This Month</h2>\n                  <Row style={{ margin: \"5px\" }}>\n                    {this.state.filteredDataThisMonth.map(\n                      ({ url, Name, Price, Location, Size, Time }) => (\n                        <Col xs={12} sm={8} md={6} lg={4} xl={4}>\n                          <Card\n                            style={{\n                              background: \"#fefae3\",\n                              margin: \"5px\",\n                              borderRadius: \"10px\",\n                            }}\n                          >\n                            <img\n                              style={{ display: \"block\" }}\n                              src={url}\n                              alt={Name}\n                            />\n                            <div className=\"title\">\n                              <h3>{Name}</h3>\n                            </div>\n                            <div className=\"card-desc\">\n                              <Row>\n                                <Col span={4}>\n                                  <EnvironmentFilled />\n                                </Col>\n                                <Col span={20}>\n                                  <p className=\"desc-text\">{Location}</p>\n                                </Col>\n                              </Row>\n                              <Row>\n                                <Col span={4}>\n                                  <ClockCircleFilled />\n                                </Col>\n                                <Col span={20}>\n                                  <p className=\"desc-text\">{Time}</p>\n                                </Col>\n                              </Row>\n                              <Row>\n                                <Col span={4}>\n                                  <DollarCircleFilled />\n                                </Col>\n                                <Col span={20}>\n                                  <p className=\"desc-text\">{Price}</p>\n                                </Col>\n                              </Row>\n                              <Row>\n                                <Col span={4}>\n                                  <SlidersFilled />\n                                </Col>\n                                <Col span={20}>\n                                  <p className=\"desc-text\">{Size}</p>\n                                </Col>\n                              </Row>\n                            </div>\n                          </Card>\n                        </Col>\n                      )\n                    )}\n                  </Row>\n                  <h2>All Cards</h2>\n                  <Row style={{ margin: \"5px\" }}>\n                    {this.state.filteredData.map(\n                      ({ url, Name, Price, Location, Size, Time }) => (\n                        <Col xs={12} sm={12} md={8} lg={6} xl={4}>\n                          <Card\n                            style={{\n                              background: \"#fefae3\",\n                              margin: \"5px\",\n                              borderRadius: \"10px\",\n                            }}\n                          >\n                            <img\n                              style={{ display: \"block\" }}\n                              src={url}\n                              alt={Name}\n                            />\n                            <h3 style={{ overflow: \"hidden !important\" }}>\n                              {Name}\n                            </h3>\n                            <p className=\"desc-text\">{Location}</p>\n                            <p>{Time}</p>\n                            <p>{Price}</p>\n                            <p>{Size}</p>\n                          </Card>\n                        </Col>\n                      )\n                    )}\n                  </Row>\n                </div>\n              )}\n          </Content>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}